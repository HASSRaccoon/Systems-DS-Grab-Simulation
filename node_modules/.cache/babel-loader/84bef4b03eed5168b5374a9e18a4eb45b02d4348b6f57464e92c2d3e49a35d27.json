{"ast":null,"code":"var _jsxFileName = \"/Users/valu/Desktop/TESTSDS/my-app/src/agents/Driver.js\",\n  _s = $RefreshSig$();\nimport styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\n\n// const Driver = () => {\n\n//   const [passenger, setPassenger] = useState(null);\n//   const [happyFactor, setHappyFactor] = useState(0);\n\n//   const search = () => {\n//     let timer;\n//     if (!passenger) {\n//       timer = setInterval(() => {\n//         const newDestination = {\n//           x: Math.floor(Math.random() * 500),\n//           y: Math.floor(Math.random() * 500),\n//         };\n//         setDestination(newDestination);\n//         if (\n//           location.x === newDestination.x &&\n//           location.y === newDestination.y\n//         ) {\n//           clearInterval(timer);\n//           search();\n//         }\n//       }, 5000);\n//     } else {\n//       const foundPassenger = passenger.find((p) => p.happyFactor < happyFactor);\n//       if (foundPassenger) {\n//         setDestination(foundPassenger.destination);\n//       } else {\n//         timer = setInterval(() => {\n//           const newDestination = {\n//             x: Math.floor(Math.random() * 500),\n//             y: Math.floor(Math.random() * 500),\n//           };\n//           setDestination(newDestination);\n//           if (\n//             location.x === newDestination.x &&\n//             location.y === newDestination.y\n//           ) {\n//             clearInterval(timer);\n//             search();\n//           }\n//         }, 5000);\n//       }\n//     }\n\n//     setTimeout(() => {\n//       clearInterval(timer);\n//       // check if there's still no passenger or no passenger that meets the happyFactor criteria after 10 seconds\n//       if (!passenger || !passenger.find((p) => p.happyFactor < happyFactor)) {\n//         // driver disappears\n//       }\n//     }, 10000);\n//   };\n\n//   const pickup = (passenger) => {\n//     setPassenger(passenger);\n//   };\n\n//   // const deliver = () => {\n//   //   setLocation(passenger.destination);\n//   //   // passenger and driver now become a unit\n//   //   // move together on the screen to the passenger's destination\n//   //   // driver disappears after reaching the destination\n//   //   // passenger disappears\n//   //   // driver goes back to function searching\n//   // };\n\n//   const completed = () => {\n//     search();\n//   };\n\n//   useEffect(() => {\n//     search();\n//   }, []);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Driver() {\n  _s();\n  const [location, setLocation] = useState({\n    x: Math.floor(Math.random() * 500),\n    y: Math.floor(Math.random() * 500)\n  });\n  const [destination, setDestination] = useState({\n    x: Math.floor(Math.random() * 500),\n    y: Math.floor(Math.random() * 500)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.driver,\n    style: {\n      top: location.y,\n      left: location.x\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Driver, \"W4PoasQUH0h6oIbLFacVdt1ecSs=\");\n_c = Driver;\nexport default Driver;\nvar _c;\n$RefreshReg$(_c, \"Driver\");","map":{"version":3,"names":["styles","React","useState","useEffect","jsxDEV","_jsxDEV","Driver","_s","location","setLocation","x","Math","floor","random","y","destination","setDestination","className","driver","style","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/valu/Desktop/TESTSDS/my-app/src/agents/Driver.js"],"sourcesContent":["import styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\n\n// const Driver = () => {\n\n//   const [passenger, setPassenger] = useState(null);\n//   const [happyFactor, setHappyFactor] = useState(0);\n\n//   const search = () => {\n//     let timer;\n//     if (!passenger) {\n//       timer = setInterval(() => {\n//         const newDestination = {\n//           x: Math.floor(Math.random() * 500),\n//           y: Math.floor(Math.random() * 500),\n//         };\n//         setDestination(newDestination);\n//         if (\n//           location.x === newDestination.x &&\n//           location.y === newDestination.y\n//         ) {\n//           clearInterval(timer);\n//           search();\n//         }\n//       }, 5000);\n//     } else {\n//       const foundPassenger = passenger.find((p) => p.happyFactor < happyFactor);\n//       if (foundPassenger) {\n//         setDestination(foundPassenger.destination);\n//       } else {\n//         timer = setInterval(() => {\n//           const newDestination = {\n//             x: Math.floor(Math.random() * 500),\n//             y: Math.floor(Math.random() * 500),\n//           };\n//           setDestination(newDestination);\n//           if (\n//             location.x === newDestination.x &&\n//             location.y === newDestination.y\n//           ) {\n//             clearInterval(timer);\n//             search();\n//           }\n//         }, 5000);\n//       }\n//     }\n\n//     setTimeout(() => {\n//       clearInterval(timer);\n//       // check if there's still no passenger or no passenger that meets the happyFactor criteria after 10 seconds\n//       if (!passenger || !passenger.find((p) => p.happyFactor < happyFactor)) {\n//         // driver disappears\n//       }\n//     }, 10000);\n//   };\n\n//   const pickup = (passenger) => {\n//     setPassenger(passenger);\n//   };\n\n//   // const deliver = () => {\n//   //   setLocation(passenger.destination);\n//   //   // passenger and driver now become a unit\n//   //   // move together on the screen to the passenger's destination\n//   //   // driver disappears after reaching the destination\n//   //   // passenger disappears\n//   //   // driver goes back to function searching\n//   // };\n\n//   const completed = () => {\n//     search();\n//   };\n\n//   useEffect(() => {\n//     search();\n//   }, []);\nfunction Driver() {\n  const [location, setLocation] = useState({\n    x: Math.floor(Math.random() * 500),\n    y: Math.floor(Math.random() * 500),\n  });\n  const [destination, setDestination] = useState({\n    x: Math.floor(Math.random() * 500),\n    y: Math.floor(Math.random() * 500),\n  });\n  return (\n    <div\n      className={styles.driver}\n      style={{ top: location.y, left: location.x }}\n    >\n      {/* green circle */}\n    </div>\n  );\n}\n\nexport default Driver;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;IAClCC,CAAC,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;EACnC,CAAC,CAAC;EACF,MAAM,CAACE,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC;IAC7CQ,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;IAClCC,CAAC,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;EACnC,CAAC,CAAC;EACF,oBACER,OAAA;IACEY,SAAS,EAAEjB,MAAM,CAACkB,MAAO;IACzBC,KAAK,EAAE;MAAEC,GAAG,EAAEZ,QAAQ,CAACM,CAAC;MAAEO,IAAI,EAAEb,QAAQ,CAACE;IAAE;EAAE;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAGzC;AAEV;AAAClB,EAAA,CAjBQD,MAAM;AAAAoB,EAAA,GAANpB,MAAM;AAmBf,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}