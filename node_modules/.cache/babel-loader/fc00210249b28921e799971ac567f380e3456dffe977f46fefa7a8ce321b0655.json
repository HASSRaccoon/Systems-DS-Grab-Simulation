{"ast":null,"code":"import { featureCollection } from \"@turf/helpers\";\nimport explode from \"@turf/explode\";\nimport roundCoord from \"./round-coord\";\nexport default function createTopology(network) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    key = defaultKey\n  } = options;\n  const {\n    tolerance = 1e-5\n  } = options;\n  const lineStrings = featureCollection(network.features.filter(f => f.geometry.type === \"LineString\"));\n  const points = explode(lineStrings);\n  const vertices = points.features.reduce(function buildTopologyVertices(coordinates, feature, index, features) {\n    var rc = roundCoord(feature.geometry.coordinates, tolerance);\n    coordinates[key(rc)] = feature.geometry.coordinates;\n    if (index % 1000 === 0 && options.progress) {\n      options.progress(\"topo:vertices\", index, features.length);\n    }\n    return coordinates;\n  }, {});\n  const edges = geoJsonReduce(lineStrings, buildTopologyEdges, []);\n  return {\n    vertices: vertices,\n    edges: edges\n  };\n  function buildTopologyEdges(edges, f) {\n    f.geometry.coordinates.forEach(function buildLineStringEdges(c, i, cs) {\n      if (i > 0) {\n        var k1 = key(roundCoord(cs[i - 1], tolerance)),\n          k2 = key(roundCoord(c, tolerance));\n        edges.push([k1, k2, f.properties]);\n      }\n    });\n    return edges;\n  }\n}\nfunction geoJsonReduce(geojson, fn, seed) {\n  if (geojson.type === \"FeatureCollection\") {\n    return geojson.features.reduce(function reduceFeatures(a, f) {\n      return geoJsonReduce(f, fn, a);\n    }, seed);\n  } else {\n    return fn(seed, geojson);\n  }\n}\nexport function defaultKey(c) {\n  return c.join(\",\");\n}","map":{"version":3,"names":["featureCollection","explode","roundCoord","createTopology","network","options","arguments","length","undefined","key","defaultKey","tolerance","lineStrings","features","filter","f","geometry","type","points","vertices","reduce","buildTopologyVertices","coordinates","feature","index","rc","progress","edges","geoJsonReduce","buildTopologyEdges","forEach","buildLineStringEdges","c","i","cs","k1","k2","push","properties","geojson","fn","seed","reduceFeatures","a","join"],"sources":["/Users/valu/Desktop/TESTSDS/Systems-DS-Grab-Simulation/node_modules/geojson-path-finder/src/topology.ts"],"sourcesContent":["import {\n  AllGeoJSON,\n  Feature,\n  featureCollection,\n  FeatureCollection,\n  LineString,\n  Position,\n} from \"@turf/helpers\";\nimport explode from \"@turf/explode\";\nimport roundCoord from \"./round-coord\";\nimport { Edge, PathFinderOptions, Topology } from \"./types\";\n\nexport default function createTopology<TEdgeData, TProperties>(\n  network: FeatureCollection<LineString, TProperties>,\n  options: PathFinderOptions<TEdgeData, TProperties> = {}\n): Topology<TProperties> {\n  const { key = defaultKey } = options;\n  const { tolerance = 1e-5 } = options;\n  const lineStrings = featureCollection(\n    network.features.filter((f) => f.geometry.type === \"LineString\")\n  );\n  const points = explode(lineStrings as AllGeoJSON);\n  const vertices = points.features.reduce(function buildTopologyVertices(\n    coordinates,\n    feature,\n    index,\n    features\n  ) {\n    var rc = roundCoord(feature.geometry.coordinates, tolerance);\n    coordinates[key(rc)] = feature.geometry.coordinates;\n\n    if (index % 1000 === 0 && options.progress) {\n      options.progress(\"topo:vertices\", index, features.length);\n    }\n\n    return coordinates;\n  },\n  {} as Record<string, Position>);\n  const edges = geoJsonReduce(\n    lineStrings,\n    buildTopologyEdges,\n    [] as Edge<TProperties>[]\n  );\n\n  return {\n    vertices: vertices,\n    edges: edges,\n  };\n\n  function buildTopologyEdges(\n    edges: Edge<TProperties>[],\n    f: Feature<LineString, TProperties>\n  ) {\n    f.geometry.coordinates.forEach(function buildLineStringEdges(c, i, cs) {\n      if (i > 0) {\n        var k1 = key(roundCoord(cs[i - 1], tolerance)),\n          k2 = key(roundCoord(c, tolerance));\n        edges.push([k1, k2, f.properties]);\n      }\n    });\n\n    return edges;\n  }\n}\n\nfunction geoJsonReduce<T, G, P>(\n  geojson: FeatureCollection<G, P> | Feature<G, P>,\n  fn: (accumulator: T, feature: Feature<G, P>) => T,\n  seed: T\n): T {\n  if (geojson.type === \"FeatureCollection\") {\n    return geojson.features.reduce(function reduceFeatures(a, f) {\n      return geoJsonReduce(f, fn, a);\n    }, seed);\n  } else {\n    return fn(seed, geojson);\n  }\n}\n\nexport function defaultKey(c: Position) {\n  return c.join(\",\");\n}\n"],"mappings":"AAAA,SAGEA,iBAAiB,QAIZ,eAAe;AACtB,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,UAAU,MAAM,eAAe;AAGtC,eAAc,SAAUC,cAAcA,CACpCC,OAAmD,EACI;EAAA,IAAvDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqD,EAAE;EAEvD,MAAM;IAAEG,GAAG,GAAGC;EAAU,CAAE,GAAGL,OAAO;EACpC,MAAM;IAAEM,SAAS,GAAG;EAAI,CAAE,GAAGN,OAAO;EACpC,MAAMO,WAAW,GAAGZ,iBAAiB,CACnCI,OAAO,CAACS,QAAQ,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,CAACC,IAAI,KAAK,YAAY,CAAC,CACjE;EACD,MAAMC,MAAM,GAAGjB,OAAO,CAACW,WAAyB,CAAC;EACjD,MAAMO,QAAQ,GAAGD,MAAM,CAACL,QAAQ,CAACO,MAAM,CAAC,SAASC,qBAAqBA,CACpEC,WAAW,EACXC,OAAO,EACPC,KAAK,EACLX,QAAQ;IAER,IAAIY,EAAE,GAAGvB,UAAU,CAACqB,OAAO,CAACP,QAAQ,CAACM,WAAW,EAAEX,SAAS,CAAC;IAC5DW,WAAW,CAACb,GAAG,CAACgB,EAAE,CAAC,CAAC,GAAGF,OAAO,CAACP,QAAQ,CAACM,WAAW;IAEnD,IAAIE,KAAK,GAAG,IAAI,KAAK,CAAC,IAAInB,OAAO,CAACqB,QAAQ,EAAE;MAC1CrB,OAAO,CAACqB,QAAQ,CAAC,eAAe,EAAEF,KAAK,EAAEX,QAAQ,CAACN,MAAM,CAAC;;IAG3D,OAAOe,WAAW;EACpB,CAAC,EACD,EAA8B,CAAC;EAC/B,MAAMK,KAAK,GAAGC,aAAa,CACzBhB,WAAW,EACXiB,kBAAkB,EAClB,EAAyB,CAC1B;EAED,OAAO;IACLV,QAAQ,EAAEA,QAAQ;IAClBQ,KAAK,EAAEA;GACR;EAED,SAASE,kBAAkBA,CACzBF,KAA0B,EAC1BZ,CAAmC;IAEnCA,CAAC,CAACC,QAAQ,CAACM,WAAW,CAACQ,OAAO,CAAC,SAASC,oBAAoBA,CAACC,CAAC,EAAEC,CAAC,EAAEC,EAAE;MACnE,IAAID,CAAC,GAAG,CAAC,EAAE;QACT,IAAIE,EAAE,GAAG1B,GAAG,CAACP,UAAU,CAACgC,EAAE,CAACD,CAAC,GAAG,CAAC,CAAC,EAAEtB,SAAS,CAAC,CAAC;UAC5CyB,EAAE,GAAG3B,GAAG,CAACP,UAAU,CAAC8B,CAAC,EAAErB,SAAS,CAAC,CAAC;QACpCgB,KAAK,CAACU,IAAI,CAAC,CAACF,EAAE,EAAEC,EAAE,EAAErB,CAAC,CAACuB,UAAU,CAAC,CAAC;;IAEtC,CAAC,CAAC;IAEF,OAAOX,KAAK;EACd;AACF;AAEA,SAASC,aAAaA,CACpBW,OAAgD,EAChDC,EAAiD,EACjDC,IAAO;EAEP,IAAIF,OAAO,CAACtB,IAAI,KAAK,mBAAmB,EAAE;IACxC,OAAOsB,OAAO,CAAC1B,QAAQ,CAACO,MAAM,CAAC,SAASsB,cAAcA,CAACC,CAAC,EAAE5B,CAAC;MACzD,OAAOa,aAAa,CAACb,CAAC,EAAEyB,EAAE,EAAEG,CAAC,CAAC;IAChC,CAAC,EAAEF,IAAI,CAAC;GACT,MAAM;IACL,OAAOD,EAAE,CAACC,IAAI,EAAEF,OAAO,CAAC;;AAE5B;AAEA,OAAM,SAAU7B,UAAUA,CAACsB,CAAW;EACpC,OAAOA,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}