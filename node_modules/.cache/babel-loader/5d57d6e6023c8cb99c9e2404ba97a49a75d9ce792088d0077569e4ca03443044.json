{"ast":null,"code":"var _s = $RefreshSig$();\nimport styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\nfunction Driver(location) {\n  _s();\n  const [state, setState] = useState(\"SEARCHING\");\n  const [driverLocation, setDriverLocation] = useState(location);\n  const [destination, setDestination] = useState(null);\n  const [waitingTime, setWaitingTime] = useState(0);\n  const [speed, setSpeed] = useState(1);\n  const [passenger, setPassenger] = useState(null);\n\n  // const [earnings, setEarnings] = useState(0);\n  // const [rating, setRating] = useState(0);\n  // const [raining, setRaining] = useState(false);\n  // const [traffic, setTraffic] = useState(false);\n  // const [emotion, setEmotion] = useState(\"angry\");\n\n  // function setSpawnLocation() {\n  //   if (location) {\n  //     return location;\n  //   } else {\n  //     return Math.floor(Math.random() * 100);\n  //     // x: Math.floor(Math.random() * 100),\n  //   }\n  // }\n  function search(passenger) {\n    setPassenger(passenger);\n    if (passenger) {\n      setState(\"PICKUP\");\n    } else {\n      setDriverLocation(prev => prev + speed);\n    }\n  }\n  function pickUp(passenger) {\n    setDestination(passenger.location);\n    if (driverLocation !== destination) {\n      setDriverLocation(prev => prev + speed);\n      console.log(`driver current location when picking up: ${driverLocation}`);\n    }\n    if (driverLocation === destination) {\n      setState(\"TRANSIT\");\n    }\n  }\n  function transit() {\n    setDestination(passenger.destination);\n    if (driverLocation !== destination) {\n      setDriverLocation(prev => prev + speed);\n      console.log(`driver current location when transit: ${driverLocation}`);\n    } else {\n      setState(\"COMPLETED\");\n    }\n  }\n  function completed() {\n    setState(\"SEARCHING\");\n  }\n}\n_s(Driver, \"O2nmo7W773nIwt50LpeBsFgdiZY=\");\n_c = Driver;\nexport default Driver;\n\n// return (\n// <div>\n//   {/* Display driver state and location */}\n//   {/* <p>Driver state: {state}</p>\n//   <p>Driver location: {driverLocation}</p> */}\n\n//   {/* Display passenger information if there is a passenger */}\n//   {passenger && (\n//     <div>\n//       <p>Passenger location: {passenger.location}</p>\n//       <p>Passenger destination: {passenger.destination}</p>\n//     </div>\n//   )}\n\n//   {/* Button to simulate picking up a passenger */}\n//   {state === \"SEARCHING\" && (\n//     <button onClick={() => search({ location: 10, destination: 20 })}>\n//       Pick up passenger\n//     </button>\n//   )}\n\n//   {/* Button to simulate transit to passenger's destination */}\n//   {state === \"PICKUP\" && (\n//     <button onClick={() => pickUp(passenger)}>Start transit</button>\n//   )}\n\n//   {/* Button to simulate completing the ride */}\n//   {state === \"TRANSIT\" && <button onClick={transit}>Complete ride</button>}\n\n//   {/* Button to reset driver state and location */}\n//   {state === \"COMPLETED\" && <button onClick={completed}>Reset</button>}\n// </div>\n// );\nvar _c;\n$RefreshReg$(_c, \"Driver\");","map":{"version":3,"names":["styles","React","useState","useEffect","Driver","location","_s","state","setState","driverLocation","setDriverLocation","destination","setDestination","waitingTime","setWaitingTime","speed","setSpeed","passenger","setPassenger","search","prev","pickUp","console","log","transit","completed","_c","$RefreshReg$"],"sources":["/Users/valu/Desktop/TESTSDS/my-app/src/agents/Driver.js"],"sourcesContent":["import styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction Driver(location) {\n  const [state, setState] = useState(\"SEARCHING\");\n  const [driverLocation, setDriverLocation] = useState(location);\n  const [destination, setDestination] = useState(null);\n  const [waitingTime, setWaitingTime] = useState(0);\n  const [speed, setSpeed] = useState(1);\n\n  const [passenger, setPassenger] = useState(null);\n\n  // const [earnings, setEarnings] = useState(0);\n  // const [rating, setRating] = useState(0);\n  // const [raining, setRaining] = useState(false);\n  // const [traffic, setTraffic] = useState(false);\n  // const [emotion, setEmotion] = useState(\"angry\");\n\n  // function setSpawnLocation() {\n  //   if (location) {\n  //     return location;\n  //   } else {\n  //     return Math.floor(Math.random() * 100);\n  //     // x: Math.floor(Math.random() * 100),\n  //   }\n  // }\n  function search(passenger) {\n    setPassenger(passenger);\n    if (passenger) {\n      setState(\"PICKUP\");\n    } else {\n      setDriverLocation((prev) => prev + speed);\n    }\n  }\n\n  function pickUp(passenger) {\n    setDestination(passenger.location);\n    if (driverLocation !== destination) {\n      setDriverLocation((prev) => prev + speed);\n      console.log(`driver current location when picking up: ${driverLocation}`);\n    }\n    if (driverLocation === destination) {\n      setState(\"TRANSIT\");\n    }\n  }\n\n  function transit() {\n    setDestination(passenger.destination);\n    if (driverLocation !== destination) {\n      setDriverLocation((prev) => prev + speed);\n      console.log(`driver current location when transit: ${driverLocation}`);\n    } else {\n      setState(\"COMPLETED\");\n    }\n  }\n\n  function completed() {\n    setState(\"SEARCHING\");\n  }\n}\n\nexport default Driver;\n\n// return (\n// <div>\n//   {/* Display driver state and location */}\n//   {/* <p>Driver state: {state}</p>\n//   <p>Driver location: {driverLocation}</p> */}\n\n//   {/* Display passenger information if there is a passenger */}\n//   {passenger && (\n//     <div>\n//       <p>Passenger location: {passenger.location}</p>\n//       <p>Passenger destination: {passenger.destination}</p>\n//     </div>\n//   )}\n\n//   {/* Button to simulate picking up a passenger */}\n//   {state === \"SEARCHING\" && (\n//     <button onClick={() => search({ location: 10, destination: 20 })}>\n//       Pick up passenger\n//     </button>\n//   )}\n\n//   {/* Button to simulate transit to passenger's destination */}\n//   {state === \"PICKUP\" && (\n//     <button onClick={() => pickUp(passenger)}>Start transit</button>\n//   )}\n\n//   {/* Button to simulate completing the ride */}\n//   {state === \"TRANSIT\" && <button onClick={transit}>Complete ride</button>}\n\n//   {/* Button to reset driver state and location */}\n//   {state === \"COMPLETED\" && <button onClick={completed}>Reset</button>}\n// </div>\n// );\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,MAAMA,CAACC,QAAQ,EAAE;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,WAAW,CAAC;EAC/C,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAACG,QAAQ,CAAC;EAC9D,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASiB,MAAMA,CAACF,SAAS,EAAE;IACzBC,YAAY,CAACD,SAAS,CAAC;IACvB,IAAIA,SAAS,EAAE;MACbT,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,MAAM;MACLE,iBAAiB,CAAEU,IAAI,IAAKA,IAAI,GAAGL,KAAK,CAAC;IAC3C;EACF;EAEA,SAASM,MAAMA,CAACJ,SAAS,EAAE;IACzBL,cAAc,CAACK,SAAS,CAACZ,QAAQ,CAAC;IAClC,IAAII,cAAc,KAAKE,WAAW,EAAE;MAClCD,iBAAiB,CAAEU,IAAI,IAAKA,IAAI,GAAGL,KAAK,CAAC;MACzCO,OAAO,CAACC,GAAG,CAAE,4CAA2Cd,cAAe,EAAC,CAAC;IAC3E;IACA,IAAIA,cAAc,KAAKE,WAAW,EAAE;MAClCH,QAAQ,CAAC,SAAS,CAAC;IACrB;EACF;EAEA,SAASgB,OAAOA,CAAA,EAAG;IACjBZ,cAAc,CAACK,SAAS,CAACN,WAAW,CAAC;IACrC,IAAIF,cAAc,KAAKE,WAAW,EAAE;MAClCD,iBAAiB,CAAEU,IAAI,IAAKA,IAAI,GAAGL,KAAK,CAAC;MACzCO,OAAO,CAACC,GAAG,CAAE,yCAAwCd,cAAe,EAAC,CAAC;IACxE,CAAC,MAAM;MACLD,QAAQ,CAAC,WAAW,CAAC;IACvB;EACF;EAEA,SAASiB,SAASA,CAAA,EAAG;IACnBjB,QAAQ,CAAC,WAAW,CAAC;EACvB;AACF;AAACF,EAAA,CAxDQF,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AA0Df,eAAeA,MAAM;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}