{"ast":null,"code":"import distance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport compactGraph from \"./compactor\";\nimport createTopology from \"./topology\";\nexport default function preprocess(network) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const topology = createTopology(network, options);\n  const {\n    weight = defaultWeight\n  } = options;\n  const graph = topology.edges.reduce(reduceEdges, {\n    edgeData: {},\n    vertices: {}\n  });\n  const {\n    graph: compactedVertices,\n    coordinates: compactedCoordinates,\n    reducedEdges: compactedEdges\n  } = compactGraph(graph.vertices, topology.vertices, graph.edgeData, options);\n  return {\n    vertices: graph.vertices,\n    edgeData: graph.edgeData,\n    sourceCoordinates: topology.vertices,\n    compactedVertices,\n    compactedCoordinates,\n    compactedEdges\n  };\n  function reduceEdges(g, edge, i, es) {\n    const [a, b, properties] = edge;\n    const w = weight(topology.vertices[a], topology.vertices[b], properties);\n    if (w) {\n      makeEdgeList(a);\n      makeEdgeList(b);\n      if (w instanceof Object) {\n        if (w.forward) {\n          concatEdge(a, b, w.forward);\n        }\n        if (w.backward) {\n          concatEdge(b, a, w.backward);\n        }\n      } else {\n        concatEdge(a, b, w);\n        concatEdge(b, a, w);\n      }\n    }\n    if (i % 1000 === 0 && options.progress) {\n      options.progress(\"edgeweights\", i, es.length);\n    }\n    return g;\n    function makeEdgeList(node) {\n      if (!g.vertices[node]) {\n        g.vertices[node] = {};\n        g.edgeData[node] = {};\n      }\n    }\n    function concatEdge(startNode, endNode, weight) {\n      var v = g.vertices[startNode];\n      v[endNode] = weight;\n      g.edgeData[startNode][endNode] = \"edgeDataReducer\" in options ? options.edgeDataSeed(properties) : undefined;\n    }\n  }\n}\nfunction defaultWeight(a, b) {\n  return distance(point(a), point(b));\n}","map":{"version":3,"names":["distance","point","compactGraph","createTopology","preprocess","network","options","arguments","length","undefined","topology","weight","defaultWeight","graph","edges","reduce","reduceEdges","edgeData","vertices","compactedVertices","coordinates","compactedCoordinates","reducedEdges","compactedEdges","sourceCoordinates","g","edge","i","es","a","b","properties","w","makeEdgeList","Object","forward","concatEdge","backward","progress","node","startNode","endNode","v","edgeDataSeed"],"sources":["/Users/valu/Desktop/TESTSDS/Systems-DS-Grab-Simulation/node_modules/geojson-path-finder/src/preprocessor.ts"],"sourcesContent":["import distance from \"@turf/distance\";\nimport { FeatureCollection, LineString, point, Position } from \"@turf/helpers\";\nimport type { PathFinderGraph, PathFinderOptions, Edge, Key } from \"./types\";\nimport compactGraph from \"./compactor\";\nimport createTopology from \"./topology\";\n\nexport default function preprocess<TEdgeReduce, TProperties>(\n  network: FeatureCollection<LineString, TProperties>,\n  options: PathFinderOptions<TEdgeReduce, TProperties> = {}\n): PathFinderGraph<TEdgeReduce> {\n  const topology = createTopology(network, options);\n  const { weight = defaultWeight } = options;\n\n  const graph = topology.edges.reduce(reduceEdges, {\n    edgeData: {},\n    vertices: {},\n  } as PathFinderGraph<TEdgeReduce>);\n\n  const {\n    graph: compactedVertices,\n    coordinates: compactedCoordinates,\n    reducedEdges: compactedEdges,\n  } = compactGraph(graph.vertices, topology.vertices, graph.edgeData, options);\n\n  return {\n    vertices: graph.vertices,\n    edgeData: graph.edgeData,\n    sourceCoordinates: topology.vertices,\n    compactedVertices,\n    compactedCoordinates,\n    compactedEdges,\n  };\n\n  function reduceEdges(\n    g: PathFinderGraph<TEdgeReduce>,\n    edge: Edge<TProperties>,\n    i: number,\n    es: Edge<TProperties>[]\n  ) {\n    const [a, b, properties] = edge;\n    const w = weight(topology.vertices[a], topology.vertices[b], properties);\n\n    if (w) {\n      makeEdgeList(a);\n      makeEdgeList(b);\n      if (w instanceof Object) {\n        if (w.forward) {\n          concatEdge(a, b, w.forward);\n        }\n        if (w.backward) {\n          concatEdge(b, a, w.backward);\n        }\n      } else {\n        concatEdge(a, b, w);\n        concatEdge(b, a, w);\n      }\n    }\n\n    if (i % 1000 === 0 && options.progress) {\n      options.progress(\"edgeweights\", i, es.length);\n    }\n\n    return g;\n\n    function makeEdgeList(node: Key) {\n      if (!g.vertices[node]) {\n        g.vertices[node] = {};\n        g.edgeData[node] = {};\n      }\n    }\n\n    function concatEdge(startNode: Key, endNode: Key, weight: number) {\n      var v = g.vertices[startNode];\n      v[endNode] = weight;\n      g.edgeData[startNode][endNode] =\n        \"edgeDataReducer\" in options\n          ? options.edgeDataSeed(properties)\n          : undefined;\n    }\n  }\n}\n\nfunction defaultWeight(a: Position, b: Position) {\n  return distance(point(a), point(b));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}